import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { 
  getFallbackResponse, 
  detectIntent, 
  isEducationRelated, 
  getDefaultResponse,
  type UserIntent
} from '@/components/chatbot/fallback';

interface ChatButton {
  text: string;
  href?: string;
  onClick?: string;
  variant?: 'primary' | 'secondary' | 'outline';
  icon?: string;
}

// Rate limiting - prosty cache (w produkcji u≈ºyj Redis)
const requestCache = new Map<string, { count: number; lastReset: number }>();
const RATE_LIMIT = 20; // 20 zapyta≈Ñ na IP
const WINDOW_MS = 15 * 60 * 1000; // 15 minut

// Cache odpowiedzi
const responseCache = new Map<string, { response: string; timestamp: number; buttons?: ChatButton[] }>();
const CACHE_TTL = 30 * 60 * 1000; // 30 minut

function checkRateLimit(ip: string): boolean {
  const now = Date.now();
  const userLimit = requestCache.get(ip);
  
  if (!userLimit || now - userLimit.lastReset > WINDOW_MS) {
    requestCache.set(ip, { count: 1, lastReset: now });
    return true;
  }
  
  if (userLimit.count >= RATE_LIMIT) {
    return false;
  }
  
  userLimit.count++;
  return true;
}

function getCachedResponse(message: string) {
  const cached = responseCache.get(message.toLowerCase().trim());
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    return cached;
  }
  return null;
}

function setCachedResponse(message: string, response: string, buttons?: ChatButton[]) {
  responseCache.set(message.toLowerCase().trim(), {
    response,
    buttons,
    timestamp: Date.now()
  });
}

export async function POST(req: NextRequest) {
  console.log('ü§ñ API Chat endpoint called');
  
  try {
    const { message } = await req.json();
    console.log('üìù Received message:', message);
    
    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      return NextResponse.json(
        { response: 'Proszƒô napisaƒá wiadomo≈õƒá! üòä' },
        { status: 400 }
      );
    }

    const ip = req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown';
    
    // Rate limiting
    if (!checkRateLimit(ip)) {
      return NextResponse.json({
        response: '‚è∞ **Zbyt wiele pyta≈Ñ!**\n\nPoczekaj chwilƒô przed kolejnym pytaniem.\n\nüí° W miƒôdzyczasie sprawd≈∫ moje materia≈Çy!',
        buttons: [
          { text: 'üìñ Matematyka', href: '/matematyka', variant: 'primary', icon: 'üìñ' },
          { text: 'üìö Angielski', href: '/angielski', variant: 'secondary', icon: 'üìö' },
          { text: 'üíæ Programowanie', href: '/programowanie', variant: 'outline', icon: 'üíæ' }
        ]
      }, { status: 429 });
    }

    // Cache check
    const cached = getCachedResponse(message);
    if (cached) {
      console.log('üì¶ Returning cached response');
      return NextResponse.json({
        response: cached.response,
        buttons: cached.buttons || [],
        cached: true
      });
    }

    // Detect user intent
    const intent = detectIntent(message);
    console.log(`üéØ Detected intent: ${intent}`);

    // 1. BOOKING - nie obs≈Çuguj tutaj, to jest w frontendzie
    if (intent === 'booking') {
      // To nie powinno siƒô zdarzyƒá bo booking jest wykrywany w frontendzie
      // Ale gdyby dotar≈Ço tutaj, zwr√≥ƒá fallback
      const fallback = getFallbackResponse(message);
      if (fallback) {
        return NextResponse.json({
          response: fallback.response,
          buttons: fallback.buttons || [],
          fallback: true
        });
      }
    }

    // 2. FAQ, PRICES, CONTACT, SERVICES, TESTIMONIALS, MATERIALS - u≈ºyj fallback
    const fallbackIntents: UserIntent[] = [
      'faq', 'price', 'contact', 
      'service_math', 'service_english', 'service_programming', 
      'service_webdev', 'service_ai',
      'testimonials', 'materials'
    ];

    if (fallbackIntents.includes(intent)) {
      console.log('üíæ Using fallback response');
      const fallbackResponse = getFallbackResponse(message);
      
      if (fallbackResponse) {
        setCachedResponse(message, fallbackResponse.response, fallbackResponse.buttons);
        return NextResponse.json({
          response: fallbackResponse.response,
          buttons: fallbackResponse.buttons || [],
          fallback: true
        });
      }
    }

    // 3. MATH_QUESTION, ENGLISH_QUESTION, PROGRAMMING_QUESTION - u≈ºyj Gemini
    const geminiIntents: UserIntent[] = ['math_question', 'english_question', 'programming_question'];
    
    if (geminiIntents.includes(intent) || intent === 'unknown') {
      console.log('ü§ñ Using Gemini API');

      const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
      const model = genAI.getGenerativeModel({ 
        model: 'gemini-2.0-flash-exp',
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 800,
        }
      });

      // Prompt dostosowany do intencji
      let systemPrompt = '';
      
      switch (intent) {
        case 'math_question':
          systemPrompt = `Jeste≈õ KORKU≈ö - AI asystent korepetycji MATEMATYKI Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz rozwiƒÖzywaƒá zadania matematyczne
- Wyja≈õniasz kroki rozwiƒÖzania
- Pokazujesz wzory i metody

ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy jako nauczycielu matematyki
2. Odpowiadaj po polsku
3. Pokazuj szczeg√≥≈Çowe kroki rozwiƒÖzania
4. U≈ºywaj emotikon√≥w üßÆüìêüìä
5. Zachƒôcaj do um√≥wienia korepetycji

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
          break;

        case 'english_question':
          systemPrompt = `Jeste≈õ KORKU≈ö - AI asystent korepetycji ANGIELSKIEGO Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz z angielskim (gramatyka, t≈Çumaczenia, konwersacje)
- Wyja≈õniasz regu≈Çy gramatyczne
- Dajesz przyk≈Çady u≈ºycia

ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy (certyfikat C2) jako nauczycielu angielskiego
2. Odpowiadaj po polsku (chyba ≈ºe pytanie wymaga angielskiego)
3. Dawaj konkretne przyk≈Çady
4. U≈ºywaj emotikon√≥w üá¨üáßüìö‚úçÔ∏è
5. Zachƒôcaj do um√≥wienia korepetycji

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
          break;

        case 'programming_question':
          systemPrompt = `Jeste≈õ KORKU≈ö - AI asystent korepetycji PROGRAMOWANIA Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz z programowaniem (Python, JavaScript, React, Next.js)
- Wyja≈õniasz kod i algorytmy
- Pokazujesz best practices

ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy (technik informatyk) jako nauczycielu programowania
2. Odpowiadaj po polsku
3. Dawaj konkretne przyk≈Çady kodu
4. U≈ºywaj emotikon√≥w üíªüêç‚öõÔ∏è
5. Zachƒôcaj do um√≥wienia korepetycji

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
          break;

        default: // unknown
          systemPrompt = `Jeste≈õ KORKU≈ö - AI chatbot asystent korepetycji Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz w matematyce, angielskim i programowaniu
- Promuj korepetycje Patryka Kuleszy
- Kieruj na odpowiednie strony

WA≈ª NE ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy jako autorze i nauczycielu
2. Odpowiadaj po polsku (chyba ≈ºe pytanie dotyczy angielskiego)
3. BƒÖd≈∫ pomocny, cierpliwy i motywujƒÖcy
4. Dla zada≈Ñ matematycznych: pokazuj kroki rozwiƒÖzania
5. Dla angielskiego: wyja≈õniaj gramatykƒô i podawaj przyk≈Çady
6. Dla programowania: dawaj konkretne przyk≈Çady kodu
7. Kieruj na odpowiednie strony (/matematyka, /angielski, /programowanie)
8. U≈ºywaj emotikon√≥w üìöüßÆüíª

TEMATYKA: korepetycje, edukacja, nauka
UNIKAJ: temat√≥w niezwiƒÖzanych z edukacjƒÖ

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
      }

      const result = await model.generateContent(systemPrompt);
      const response = result.response;
      const aiResponse = response.text();

      // Inteligentne przyciski na podstawie intencji
      let smartButtons: ChatButton[] = [];
      
      switch (intent) {
        case 'math_question':
          smartButtons = [
            { text: 'üìñ Wiƒôcej materia≈Ç√≥w', href: '/matematyka', variant: 'primary', icon: 'üìñ' },
            { text: 'üìÖ Um√≥w korepetycje', onClick: 'startBooking()', variant: 'secondary', icon: 'üìÖ' }
          ];
          break;

        case 'english_question':
          smartButtons = [
            { text: 'üìö Materia≈Çy angielski', href: '/angielski', variant: 'primary', icon: 'üìö' },
            { text: 'üìÖ Um√≥w lekcje', onClick: 'startBooking()', variant: 'secondary', icon: 'üìÖ' }
          ];
          break;

        case 'programming_question':
          smartButtons = [
            { text: 'üíæ Materia≈Çy IT', href: '/programowanie', variant: 'primary', icon: 'üíæ' },
            { text: 'üìÖ Um√≥w korepetycje', onClick: 'startBooking()', variant: 'secondary', icon: 'üìÖ' }
          ];
          break;

        default:
          smartButtons = [
            { text: 'üßÆ Matematyka', href: '/matematyka', variant: 'primary', icon: 'üßÆ' },
            { text: 'üá¨üáß Angielski', href: '/angielski', variant: 'secondary', icon: 'üá¨üáß' },
            { text: 'üíª Programowanie', href: '/programowanie', variant: 'outline', icon: 'üíª' }
          ];
      }

      // Cache response
      setCachedResponse(message, aiResponse, smartButtons);

      return NextResponse.json({
        response: aiResponse,
        buttons: smartButtons,
        apiUsed: true
      });
    }

    // 4. Fallback dla wszystkiego innego
    console.log('üíæ Using default fallback');
    const defaultResponse = getDefaultResponse();
    
    setCachedResponse(message, defaultResponse.response, defaultResponse.buttons);
    
    return NextResponse.json({
      response: defaultResponse.response,
      buttons: defaultResponse.buttons || [],
      fallback: true
    });

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd chatbota:', error);

    // Error fallback
    try {
      const { message } = await req.json().catch(() => ({ message: '' }));
      
      if (isEducationRelated(message)) {
        const fallback = getFallbackResponse(message) || getDefaultResponse();
        return NextResponse.json({
          response: fallback.response,
          buttons: fallback.buttons || [],
          fallback: true
        }, { status: 200 });
      }
    } catch {}

    return NextResponse.json({
      response: 'üòÖ **Ups! Co≈õ posz≈Ço nie tak...**\n\nSpr√≥buj ponownie za chwilƒô lub skontaktuj siƒô bezpo≈õrednio z **Patrykiem KuleszƒÖ**!',
      buttons: [
        { text: 'üîÑ Spr√≥buj ponownie', onClick: 'location.reload()', variant: 'primary', icon: 'üîÑ' },
        { text: 'üìû Kontakt bezpo≈õredni', href: 'tel:+48662581368', variant: 'secondary', icon: 'üìû' }
      ]
    }, { status: 500 });
  }
}