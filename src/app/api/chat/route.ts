import { NextRequest, NextResponse } from 'next/server';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { 
  getFallbackResponse, 
  detectIntent, 
  isEducationRelated, 
  getDefaultResponse,
  type UserIntent
} from '@/components/chatbot/fallback';

interface ChatButton {
  text: string;
  href?: string;
  onClick?: string;
  variant?: 'primary' | 'secondary' | 'outline';
  icon?: string;
}

// History interface do przechowywania konwersacji
interface ConversationHistory {
  messages: {
    role: 'user' | 'model';
    parts: string;
  }[];
  lastUpdated: number;
}

// Rate limiting - prosty cache (w produkcji u≈ºyj Redis)
const requestCache = new Map<string, { count: number; lastReset: number }>();
const RATE_LIMIT = 20; // 20 zapyta≈Ñ na IP
const WINDOW_MS = 15 * 60 * 1000; // 15 minut

// Cache odpowiedzi
const responseCache = new Map<string, { response: string; timestamp: number; buttons?: ChatButton[] }>();
const CACHE_TTL = 30 * 60 * 1000; // 30 minut

// Storage dla historii konwersacji
const conversationStore = new Map<string, ConversationHistory>();
const HISTORY_TTL = 30 * 60 * 1000; // 30 minut przechowywania historii

function checkRateLimit(ip: string): boolean {
  const now = Date.now();
  const userLimit = requestCache.get(ip);
  
  if (!userLimit || now - userLimit.lastReset > WINDOW_MS) {
    requestCache.set(ip, { count: 1, lastReset: now });
    return true;
  }
  
  if (userLimit.count >= RATE_LIMIT) {
    return false;
  }
  
  userLimit.count++;
  return true;
}

function getCachedResponse(message: string) {
  const cached = responseCache.get(message.toLowerCase().trim());
  if (cached && Date.now() - cached.timestamp < CACHE_TTL) {
    return cached;
  }
  return null;
}

function setCachedResponse(message: string, response: string, buttons?: ChatButton[]) {
  responseCache.set(message.toLowerCase().trim(), {
    response,
    buttons,
    timestamp: Date.now()
  });
}

// Funkcja obs≈ÇugujƒÖca historiƒô konwersacji
function getOrCreateConversationHistory(sessionId: string): ConversationHistory {
  const now = Date.now();
  
  // Czy≈õcimy stare konwersacje
  for (const [id, conversation] of conversationStore.entries()) {
    if (now - conversation.lastUpdated > HISTORY_TTL) {
      conversationStore.delete(id);
    }
  }
  
  // Zwracamy istniejƒÖcƒÖ historiƒô lub tworzymy nowƒÖ
  if (!conversationStore.has(sessionId)) {
    conversationStore.set(sessionId, {
      messages: [],
      lastUpdated: now
    });
  }
  
  return conversationStore.get(sessionId)!;
}

// Funkcja dodajƒÖca wiadomo≈õƒá do historii
function addMessageToHistory(sessionId: string, role: 'user' | 'model', message: string) {
  const history = getOrCreateConversationHistory(sessionId);
  history.messages.push({ role, parts: message });
  history.lastUpdated = Date.now();
  
  // Limitujƒô historiƒô do 10 ostatnich wiadomo≈õci (5 rund)
  if (history.messages.length > 10) {
    history.messages = history.messages.slice(-10);
  }
}

export async function POST(req: NextRequest) {
  console.log('ü§ñ API Chat endpoint called');
  
  try {
    // Rozszerzamy obiekt request o sessionId, helpMode i imageUrls
    const { 
      message, 
      sessionId = crypto.randomUUID(),
      helpMode = false,
      problemContext = '',
      problemId = '',
      imageUrls = [],
      examInfo = null
    } = await req.json();
    
    console.log('üìù Received message:', message);
    console.log('üÜî Session ID:', sessionId);
    
    if (helpMode) {
      console.log('üéØ HELP MODE ACTIVATED for problem:', problemId);
      console.log('üìö Exam Info:', examInfo);
      console.log('üñºÔ∏è Images:', imageUrls);
    }
    
    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      return NextResponse.json(
        { response: 'Proszƒô napisaƒá wiadomo≈õƒá! üòä', sessionId },
        { status: 400 }
      );
    }

    const ip = req.headers.get('x-forwarded-for') || req.headers.get('x-real-ip') || 'unknown';
    
    // Rate limiting
    if (!checkRateLimit(ip)) {
      return NextResponse.json({
        response: '‚è∞ **Zbyt wiele pyta≈Ñ!**\n\nPoczekaj chwilƒô przed kolejnym pytaniem.\n\nüí° W miƒôdzyczasie sprawd≈∫ moje materia≈Çy!',
        buttons: [
          { text: 'üìñ Matematyka', href: '/matematyka', variant: 'primary', icon: 'üìñ' },
          { text: 'üìö Angielski', href: '/angielski', variant: 'secondary', icon: 'üìö' },
          { text: 'üíæ Programowanie', href: '/programowanie', variant: 'outline', icon: 'üíæ' }
        ],
        sessionId
      }, { status: 429 });
    }

    // Pobieramy historiƒô konwersacji
    const conversationHistory = getOrCreateConversationHistory(sessionId);
    
    // Dodajemy wiadomo≈õƒá u≈ºytkownika do historii
    addMessageToHistory(sessionId, 'user', message);
    
    // üî• HELP MODE - specjalny tutoring system z wsparciem obraz√≥w
    if (helpMode && problemContext) {
      console.log('üéì Activating tutoring mode with problem context');
      
      // üî• DETEKCJA ZMIANY TEMATU - u≈ºytkownik chce wyj≈õƒá z trybu pomocy z zadaniem
      const offTopicKeywords = [
        'nie chodzi mi o zadanie',
        'nie o to pytam',
        'inna sprawa',
        'inne pytanie',
        'zmiana tematu',
        'patryk',
        'korepetycje online',
        'jak siƒô um√≥wiƒá',
        'cennik',
        'kontakt',
        'email',
        'telefon',
        'numer',
        'ile kosztuje',
        'cena',
        'koszt',
        'zadzwo≈Ñ',
        'korepetycje',
        'mail',
        'o tobie',
        'kto to',
        'kim jeste≈õ'
      ];
      
      const isOffTopic = offTopicKeywords.some(keyword => 
        message.toLowerCase().includes(keyword)
      );
      
      // Je≈õli u≈ºytkownik zmienia temat, prze≈ÇƒÖcz na normalny tryb
      if (isOffTopic) {
        console.log('üîÑ User changing topic - switching to normal mode');
        // Bƒôdzie przetwarzane przez normalny flow poni≈ºej
      } else {
        // Kontynuuj z tutoring mode
      
      const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
      const model = genAI.getGenerativeModel({ 
        model: 'gemini-2.0-flash-exp',
        generationConfig: {
          temperature: 0.8,
          topP: 0.9,
          topK: 40,
          maxOutputTokens: 1000,
        }
      });

      // Tworzenie specjalnego system prompta dla tutoringu
      let tutorSystemPrompt = `Jeste≈õ KORKU≈ö - AI tutor matematyczny. Pomagasz uczniom przygotowujƒÖcym siƒô do egzamin√≥w z Patrykiem KuleszƒÖ.

üéØ **TRYB: POMOC Z ZADANIEM EGZAMINACYJNYM**

üìã **KONTEKST ZADANIA:**
${problemContext}

üìö **INFORMACJE O EGZAMINIE:**
${examInfo ? `- Tytu≈Ç: ${examInfo.title}\n- Rok: ${examInfo.year}\n- Typ: ${examInfo.type}\n- Poziom: ${examInfo.level}` : 'Brak dodatkowych informacji'}`;

      // üî• Dodaj info o obrazach je≈õli sƒÖ
      if (imageUrls && imageUrls.length > 0) {
        tutorSystemPrompt += `\n\nüñºÔ∏è **OBRAZY/DIAGRAMY:**\nZadanie zawiera ${imageUrls.length} ${imageUrls.length === 1 ? 'obraz' : 'obraz√≥w'} - analizuj je uwa≈ºnie, aby pom√≥c uczniowi zrozumieƒá diagram/wykres/ilustracjƒô.`;
      }

      tutorSystemPrompt += `\n\n‚ö†Ô∏è **ZASADY TUTORINGU (ELASTYCZNE):**

üéØ **STRATEGIA POMOCY:**
1. **NAJPIERW - PODPOWIEDZI** - zacznij od pyta≈Ñ naprowadzajƒÖcych i wskaz√≥wek
2. **OBSERWUJ REAKCJƒò** - jak ucze≈Ñ reaguje na podpowiedzi
3. **DOSTOSUJ SIƒò** - je≈õli ucze≈Ñ wyra≈∫nie prosi o pe≈Çne rozwiƒÖzanie, poka≈º je!

üìö **KIEDY DAWAƒÜ PODPOWIEDZI:**
- Gdy ucze≈Ñ pyta "jak zaczƒÖƒá?", "nie wiem od czego zaczƒÖƒá"
- Zadawaj pytania: "Co wiesz o...", "Jakie dane masz?", "Jaki wz√≥r mo≈ºemy u≈ºyƒá?"
- Wskazuj kierunek bez podawania gotowca
- Zachƒôcaj do my≈õlenia: "Spr√≥buj...", "Zastan√≥w siƒô..."

‚úÖ **KIEDY DAWAƒÜ PE≈ÅNE ROZWIƒÑZANIE:**
- Gdy ucze≈Ñ wyra≈∫nie prosi: "poka≈º rozwiƒÖzanie", "jak to rozwiƒÖzaƒá?", "daj pe≈ÇnƒÖ odpowied≈∫"
- Gdy ucze≈Ñ utknƒÖ≈Ç mimo podpowiedzi
- Gdy ucze≈Ñ chce zobaczyƒá wzorcowe rozwiƒÖzanie do nauki
- WTEDY: Poka≈º pe≈Çne, szczeg√≥≈Çowe rozwiƒÖzanie krok po kroku z komentarzami!

üí° **FORMAT PE≈ÅNEGO ROZWIƒÑZANIA:**
- Wypisz ka≈ºdy krok obliczeniowy
- Dodaj komentarze wyja≈õniajƒÖce "dlaczego tak robimy"
- U≈ºyj LaTeX dla wszystkich wzor√≥w
- Podsumuj ko≈ÑcowƒÖ odpowied≈∫
- PRZYK≈ÅAD:
  **Krok 1:** Rozwijamy $(3x+2)^2$ u≈ºywajƒÖc wzoru $(a+b)^2 = a^2 + 2ab + b^2$
  $$$(3x+2)^2 = (3x)^2 + 2 \\cdot 3x \\cdot 2 + 2^2 = 9x^2 + 12x + 4$$$
  
üéì **TWOJA ROLA:**
- Jeste≈õ profesjonalnym tutorem, kt√≥ry umie DOSTOSOWAƒÜ podej≈õcie
- Domy≈õlnie pomagasz my≈õleƒá samodzielnie
- Ale gdy potrzeba - dajesz pe≈Çne, wzorcowe rozwiƒÖzanie
- Zawsze wyja≈õniaj "dlaczego" - rozwijaj zrozumienie
- **NIE u≈ºywaj imion uczni√≥w** - nie znasz ich imienia
- Chwal postƒôpy i buduj pewno≈õƒá siebie

üìê **FORMATOWANIE MATEMATYCZNE:**
- **ZAWSZE u≈ºywaj LaTeX dla wzor√≥w matematycznych**
- Wzory inline: otocz w pojedyncze $ np. $x^2 + 5$
- Wzory w osobnej linii: otocz w podw√≥jne $$ np. $$\\frac{a}{b}$$
- Pierwiastki: $\\sqrt{x}$ lub $\\sqrt[3]{x}$
- U≈Çamki: $\\frac{licznik}{mianownik}$
- Potƒôgi: $x^2$, indeksy dolne: $x_1$
- PRZYK≈ÅAD: "Liczba $(\\sqrt{32} - \\sqrt{2})^2$ jest r√≥wna..."

üìù **PYTANIE/PRO≈öBA UCZNIA:**
"${message}"

üí° **ODPOWIEDZ PROFESJONALNIE:**
- Kr√≥tko i zwiƒô≈∫le (max 300 s≈Ç√≥w dla podpowiedzi, wiƒôcej je≈õli pe≈Çne rozwiƒÖzanie)
- Po polsku
- Z emotikonami üßÆüìê‚ú®
- U≈ªYWAJ LaTeX dla wszystkich wzor√≥w
- Je≈õli ucze≈Ñ prosi o rozwiƒÖzanie ‚Üí poka≈º pe≈Çne rozwiƒÖzanie krok po kroku
- Je≈õli ucze≈Ñ nie wie jak zaczƒÖƒá ‚Üí zadaj pytania naprowadzajƒÖce
- Zawsze wyja≈õniaj "dlaczego" robisz dany krok`;

      try {
        // üî• Przygotuj parts - text + obrazy
        const parts: any[] = [{ text: tutorSystemPrompt }];
        
        // Dodaj obrazy je≈õli sƒÖ (Gemini wspiera inline data)
        if (imageUrls && imageUrls.length > 0) {
          for (const imageUrl of imageUrls) {
            try {
              // Konwertuj path to URL dla serwera
              const fullImagePath = imageUrl.startsWith('http') 
                ? imageUrl 
                : `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}${imageUrl}`;
              
              console.log('üì∏ Fetching image:', fullImagePath);
              
              const imageResponse = await fetch(fullImagePath);
              const imageBuffer = await imageResponse.arrayBuffer();
              const base64Image = Buffer.from(imageBuffer).toString('base64');
              
              parts.push({
                inlineData: {
                  mimeType: 'image/png',
                  data: base64Image
                }
              });
            } catch (imgError) {
              console.error('‚ùå Error loading image:', imageUrl, imgError);
            }
          }
        }

        const chat = model.startChat({
          history: conversationHistory.messages.slice(0, -1).map(msg => ({
            role: msg.role,
            parts: [{ text: msg.parts }]
          })),
          generationConfig: {
            temperature: 0.8,
            topP: 0.9,
            topK: 40,
            maxOutputTokens: 1000,
          }
        });

        const result = await chat.sendMessage(parts);
        const response = result.response.text();

        console.log('‚úÖ Tutoring response generated (with images)');
        addMessageToHistory(sessionId, 'model', response);

        return NextResponse.json({
          response,
          sessionId,
          helpMode: true,
          problemId
        });
      } catch (error) {
        console.error('‚ùå Error in help mode:', error);
        return NextResponse.json({
          response: 'üòÖ **Przepraszam, mam problem z po≈ÇƒÖczeniem...**\n\nSpr√≥buj jeszcze raz za chwilƒô, albo skontaktuj siƒô bezpo≈õrednio z Patrykiem: **+48 662 581 368**',
          sessionId
        }, { status: 500 });
      }
      } // Zamkniƒôcie else (tutoring mode)
    }
    
    // U≈ºywamy cache tylko gdy nie ma wcze≈õniejszej historii
    if (conversationHistory.messages.length <= 1) {
      const cached = getCachedResponse(message);
      if (cached) {
        console.log('üì¶ Returning cached response');
        
        // Dodajemy odpowied≈∫ z cache do historii
        addMessageToHistory(sessionId, 'model', cached.response);
        
        return NextResponse.json({
          response: cached.response,
          buttons: cached.buttons || [],
          cached: true,
          sessionId
        });
      }
    }

    // Detect user intent
    const intent = detectIntent(message);
    console.log(`üéØ Detected intent: ${intent}`);

    // 1. BOOKING - zwr√≥ƒá specjalnƒÖ odpowied≈∫ kt√≥ra wywo≈Ça booking w frontend
    if (intent === 'booking') {
      console.log('üéØ Booking intent detected in API - triggering frontend booking');
      
      const bookingResponse = 'üéØ **≈öwietnie! Zarezerwujmy termin.**\n\nüìö **Z jakiego przedmiotu potrzebujesz pomocy?**';
      
      // Dodajemy odpowied≈∫ do historii
      addMessageToHistory(sessionId, 'model', bookingResponse);
      
      return NextResponse.json({
        response: bookingResponse,
        triggerBooking: true, // Specjalny flag dla frontend
        buttons: [
          { text: 'üßÆ Matematyka', onClick: 'selectSubject("Matematyka")', variant: 'primary', icon: 'üßÆ' },
          { text: 'üá¨üáß Angielski', onClick: 'selectSubject("Angielski")', variant: 'secondary', icon: 'üá¨üáß' },
          { text: 'üíª Programowanie', onClick: 'selectSubject("Programowanie")', variant: 'outline', icon: 'üíª' }
        ],
        sessionId
      });
    }

    // 2. FAQ, PRICES, CONTACT, SERVICES, TESTIMONIALS, MATERIALS - u≈ºyj fallback
    const fallbackIntents: UserIntent[] = [
      'faq', 'price', 'contact', 
      'service_math', 'service_english', 'service_programming', 
      'service_webdev', 'service_ai',
      'testimonials', 'materials'
    ];

    if (fallbackIntents.includes(intent)) {
      console.log('üíæ Using fallback response');
      const fallbackResponse = getFallbackResponse(message);
      
      if (fallbackResponse) {
        // Dodajemy odpowied≈∫ do historii
        addMessageToHistory(sessionId, 'model', fallbackResponse.response);
        
        // Cache tylko je≈õli to pierwsze pytanie
        if (conversationHistory.messages.length <= 2) {
          setCachedResponse(message, fallbackResponse.response, fallbackResponse.buttons);
        }
        
        return NextResponse.json({
          response: fallbackResponse.response,
          buttons: fallbackResponse.buttons || [],
          fallback: true,
          sessionId
        });
      }
    }

    // 3. MATH_QUESTION, ENGLISH_QUESTION, PROGRAMMING_QUESTION - u≈ºyj Gemini
    const geminiIntents: UserIntent[] = ['math_question', 'english_question', 'programming_question'];
    
    if (geminiIntents.includes(intent) || intent === 'unknown') {
      console.log('ü§ñ Using Gemini API');

      const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY!);
      const model = genAI.getGenerativeModel({ 
        model: 'gemini-2.0-flash-exp',
        generationConfig: {
          temperature: 0.7,
          topP: 0.8,
          topK: 40,
          maxOutputTokens: 800,
        }
      });
      
      // Tworzenie kontekstu z historii
      const chatHistory = conversationHistory.messages.slice(0, -1); // bez ostatniej wiadomo≈õci
      
      let chat;
      let systemPrompt = '';
      
      // Je≈õli mamy historiƒô, u≈ºywamy chat.sendMessage zamiast generateContent
      if (chatHistory.length > 0) {
        chat = model.startChat({
          history: chatHistory.map(msg => ({
            role: msg.role,
            parts: [{ text: msg.parts }]
          })),
          generationConfig: {
            temperature: 0.7,
            topP: 0.8,
            topK: 40,
            maxOutputTokens: 800,
          }
        });
      }

      // Przygotowanie systemPrompt zgodnie z intencjƒÖ
      switch (intent) {
        case 'math_question':
          systemPrompt = `Jeste≈õ KORKU≈ö - AI asystent korepetycji MATEMATYKI Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz rozwiƒÖzywaƒá zadania matematyczne
- Wyja≈õniasz kroki rozwiƒÖzania
- Pokazujesz wzory i metody

ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy jako nauczycielu matematyki
2. Odpowiadaj po polsku
3. Pokazuj szczeg√≥≈Çowe kroki rozwiƒÖzania
4. U≈ºywaj emotikon√≥w üßÆüìêüìä
5. Zachƒôcaj do um√≥wienia korepetycji

üìê **FORMATOWANIE MATEMATYCZNE:**
- ZAWSZE u≈ºywaj LaTeX dla wzor√≥w matematycznych
- Wzory inline: $x^2 + 5$, $\\frac{a}{b}$, $\\sqrt{x}$
- Wzory display: $$\\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}$$
- Przyk≈Çady: $2x + 3 = 7$, $\\sin(x)$, $x^{2n+1}$
- U≈ªYWAJ LaTeX dla wszystkich wzor√≥w matematycznych!

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
          break;

        case 'english_question':
          systemPrompt = `Jeste≈õ KORKU≈ö - AI asystent korepetycji ANGIELSKIEGO Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz z angielskim (gramatyka, t≈Çumaczenia, konwersacje)
- Wyja≈õniasz regu≈Çy gramatyczne
- Dajesz przyk≈Çady u≈ºycia

ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy (certyfikat C2) jako nauczycielu angielskiego
2. Odpowiadaj po polsku (chyba ≈ºe pytanie wymaga angielskiego)
3. Dawaj konkretne przyk≈Çady
4. U≈ºywaj emotikon√≥w üá¨üáßüìö‚úçÔ∏è
5. Zachƒôcaj do um√≥wienia korepetycji

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
          break;

        case 'programming_question':
          systemPrompt = `Jeste≈õ KORKU≈ö - AI asystent korepetycji PROGRAMOWANIA Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz z programowaniem (Python, JavaScript, React, Next.js)
- Wyja≈õniasz kod i algorytmy
- Pokazujesz best practices

ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy (technik informatyk) jako nauczycielu programowania
2. Odpowiadaj po polsku
3. Dawaj konkretne przyk≈Çady kodu
4. U≈ºywaj emotikon√≥w üíªüêç‚öõÔ∏è
5. Zachƒôcaj do um√≥wienia korepetycji

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
          break;

        default: // unknown
          systemPrompt = `Jeste≈õ KORKU≈ö - AI chatbot asystent korepetycji Patryka Kuleszy.

TWOJA ROLA:
- Pomagasz w matematyce, angielskim i programowaniu
- Promuj korepetycje Patryka Kuleszy
- Kieruj na odpowiednie strony

WA≈ª NE ZASADY:
1. ZAWSZE wspominaj o Patryku Kuleszy jako autorze i nauczycielu
2. Odpowiadaj po polsku (chyba ≈ºe pytanie dotyczy angielskiego)
3. BƒÖd≈∫ pomocny, cierpliwy i motywujƒÖcy
4. Dla zada≈Ñ matematycznych: pokazuj kroki rozwiƒÖzania
5. Dla angielskiego: wyja≈õniaj gramatykƒô i podawaj przyk≈Çady
6. Dla programowania: dawaj konkretne przyk≈Çady kodu
7. Kieruj na odpowiednie strony (/matematyka, /angielski, /programowanie)
8. U≈ºywaj emotikon√≥w üìöüßÆüíª

TEMATYKA: korepetycje, edukacja, nauka
UNIKAJ: temat√≥w niezwiƒÖzanych z edukacjƒÖ

Pytanie ucznia: "${message}"

Odpowiedz kr√≥tko (max 300 s≈Ç√≥w) i praktycznie.`;
      }

      // Wywo≈Çanie odpowiedniego API w zale≈ºno≈õci od historii
      let result;
      if (chat && chatHistory.length > 0) {
        // U≈ºywamy czatu z historiƒÖ konwersacji
        result = await chat.sendMessage(message);
      } else {
        // U≈ºywamy jednorazowego generowania
        result = await model.generateContent(systemPrompt);
      }

      const response = result.response;
      const aiResponse = response.text();

      // Dodajemy odpowied≈∫ do historii
      addMessageToHistory(sessionId, 'model', aiResponse);

      // Inteligentne przyciski na podstawie intencji
      let smartButtons: ChatButton[] = [];
      
      switch (intent) {
        case 'math_question':
          smartButtons = [
            { text: 'üìñ Wiƒôcej materia≈Ç√≥w', href: '/matematyka', variant: 'primary', icon: 'üìñ' },
            { text: 'üìÖ Um√≥w korepetycje', onClick: 'startBooking()', variant: 'secondary', icon: 'üìÖ' }
          ];
          break;

        case 'english_question':
          smartButtons = [
            { text: 'üìö Materia≈Çy angielski', href: '/angielski', variant: 'primary', icon: 'üìö' },
            { text: 'üìÖ Um√≥w lekcje', onClick: 'startBooking()', variant: 'secondary', icon: 'üìÖ' }
          ];
          break;

        case 'programming_question':
          smartButtons = [
            { text: 'üíæ Materia≈Çy IT', href: '/programowanie', variant: 'primary', icon: 'üíæ' },
            { text: 'üìÖ Um√≥w korepetycje', onClick: 'startBooking()', variant: 'secondary', icon: 'üìÖ' }
          ];
          break;

        default:
          smartButtons = [
            { text: 'üßÆ Matematyka', href: '/matematyka', variant: 'primary', icon: 'üßÆ' },
            { text: 'üá¨üáß Angielski', href: '/angielski', variant: 'secondary', icon: 'üá¨üáß' },
            { text: 'üíª Programowanie', href: '/programowanie', variant: 'outline', icon: 'üíª' }
          ];
      }

      // Cache response tylko je≈õli to pierwsze pytanie
      if (conversationHistory.messages.length <= 2) {
        setCachedResponse(message, aiResponse, smartButtons);
      }

      return NextResponse.json({
        response: aiResponse,
        buttons: smartButtons,
        apiUsed: true,
        sessionId
      });
    }

    // 4. Fallback dla wszystkiego innego
    console.log('üíæ Using default fallback');
    const defaultResponse = getDefaultResponse();
    
    // Dodajemy odpowied≈∫ do historii
    addMessageToHistory(sessionId, 'model', defaultResponse.response);
    
    // Cache tylko je≈õli to pierwsze pytanie
    if (conversationHistory.messages.length <= 2) {
      setCachedResponse(message, defaultResponse.response, defaultResponse.buttons);
    }
    
    return NextResponse.json({
      response: defaultResponse.response,
      buttons: defaultResponse.buttons || [],
      fallback: true,
      sessionId
    });

  } catch (error) {
    console.error('‚ùå B≈ÇƒÖd chatbota:', error);

    // Error fallback
    try {
      const { message, sessionId = crypto.randomUUID() } = await req.json().catch(() => ({ message: '', sessionId: crypto.randomUUID() }));
      
      if (isEducationRelated(message)) {
        const fallback = getFallbackResponse(message) || getDefaultResponse();
        return NextResponse.json({
          response: fallback.response,
          buttons: fallback.buttons || [],
          fallback: true,
          sessionId
        }, { status: 200 });
      }
      
      return NextResponse.json({
        response: 'üòÖ **Ups! Co≈õ posz≈Ço nie tak...**\n\nSpr√≥buj ponownie za chwilƒô lub skontaktuj siƒô bezpo≈õrednio z **Patrykiem KuleszƒÖ**!',
        buttons: [
          { text: 'üîÑ Spr√≥buj ponownie', onClick: 'location.reload()', variant: 'primary', icon: 'üîÑ' },
          { text: 'üìû Kontakt bezpo≈õredni', href: 'tel:+48662581368', variant: 'secondary', icon: 'üìû' }
        ],
        sessionId
      }, { status: 500 });
    } catch {
      return NextResponse.json({
        response: 'üòÖ **Ups! Co≈õ posz≈Ço nie tak...**\n\nSpr√≥buj ponownie za chwilƒô lub skontaktuj siƒô bezpo≈õrednio z **Patrykiem KuleszƒÖ**!',
        buttons: [
          { text: 'üîÑ Spr√≥buj ponownie', onClick: 'location.reload()', variant: 'primary', icon: 'üîÑ' },
          { text: 'üìû Kontakt bezpo≈õredni', href: 'tel:+48662581368', variant: 'secondary', icon: 'üìû' }
        ]
      }, { status: 500 });
    }
  }
}